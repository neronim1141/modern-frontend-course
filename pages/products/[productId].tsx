import { InferGetStaticPropsType } from "next";
import { Main } from "../../components/Main";
import { serialize } from "next-mdx-remote/serialize";
import { ProductDetails } from "../../components/Product";

export type InferGetStaticPaths<T> = T extends () => Promise<{
  paths: Array<{ params: infer R }>;
}>
  ? { params?: R }
  : never;

const ProductsDetailsPage = ({
  data,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  if (!data) {
    return <>cos nie tak</>;
  }
  return (
    <Main>
      <ProductDetails
        data={{
          id: data.id,
          thumbnailAlt: data.title,
          thumbnailUrl: data.image,
          title: data.title,
          description: data.description,
          rating: data.rating.rate,
          longDescription: data.longDescription,
        }}
      />
    </Main>
  );
};

export default ProductsDetailsPage;

export const getStaticPaths = async () => {
  const data: StoreApiResponse[] = await (
    await fetch("https://naszsklep-api.vercel.app/api/products/")
  ).json();

  return {
    paths: data.map((product) => {
      return {
        params: {
          productId: product.id.toString(),
        },
      };
    }),
    fallback: false,
  };
};

export const getStaticProps = async ({
  params,
}: InferGetStaticPaths<typeof getStaticPaths>) => {
  if (!params?.productId)
    return {
      props: {},
      notFound: true,
    };

  const data: StoreApiResponse | null = await (
    await fetch(
      `https://naszsklep-api.vercel.app/api/products/${params.productId}`
    )
  ).json();

  if (!data) {
    return {
      props: {},
      notFound: true,
    };
  }

  const compiledMarkdown = await serialize(data?.longDescription);

  return {
    props: {
      data: { ...data, longDescription: compiledMarkdown },
    },
  };
};

// Generated by https://quicktype.io

export interface StoreApiResponse {
  id: number;
  title: string;
  price: number;
  description: string;
  longDescription: string;
  category: string;
  image: string;
  rating: {
    rate: number;
    count: number;
  };
}
